<section class="section bg-light">
    <div class="container">
        <div class="row align-items-stretch retro-layout" id="productsContainer">
            <!-- Các bài viết sẽ được chèn vào đây -->
        </div>
        <div class="row">
            <div class="col-md-12 text-center">
                <button id="prevPage" class="btn btn-primary">Trước</button>
                <span id="currentPage">Trang 1</span>
                <button id="nextPage" class="btn btn-primary">Tiếp theo</button>
            </div>
        </div>
    </div>
</section>
@Html.Partial("_FooterPartial")

<!-- End retro layout blog posts -->
<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        var currentPage = 1; // Trang hiện tại
        var itemsPerPage = 3; // Số sản phẩm trên mỗi trang
        var allProducts = []; // Lưu danh sách sản phẩm
        var categoriesMap = {}; // Map of categories
        var token = localStorage.getItem('token');
        var headers = {};

        if (token) {
            headers.Authorization = 'Bearer ' + token;
        }

        var currentUser = getUserFromToken(token);
        function getUserFromToken(token) {
            var tokenPayload = JSON.parse(atob(token.split('.')[1]));
            return {
                userId: tokenPayload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"],
                userName: tokenPayload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"],
                firstName: decodeURIComponent(escape(tokenPayload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"])),
                avatarUrl: tokenPayload["AvatarUrl"],
            };
        }
        // Hàm lấy sản phẩm từ API
        function fetchProducts() {
            $.get('http://localhost:5233/api/Products', function (data) {
                // Filter products by current userId
                allProducts = data.filter(function (product) {
                    return product.userId === currentUser.userId;
                }).sort(function (a, b) {
                    return new Date(b.createdAt) - new Date(a.createdAt);
                });
                updateUI();
            }).fail(function () {
                console.error('Failed to fetch products.');
            });

            $.get('http://localhost:5233/api/Category', function (response) {
                response.forEach(function (category) {
                    categoriesMap[category.id] = category.name;
                });
                updateUI();
            }).fail(function (xhr, status, error) {
                console.error('Error fetching categories:', error);
            });
        }
        // Hàm cập nhật UI dựa trên danh sách sản phẩm từ API
        function updateUI() {
            var currentItems = getCurrentPageItems();

            // Xóa tất cả sản phẩm trước đó
            $('#productsContainer').empty();

            // Hiển thị sản phẩm từ danh sách
            currentItems.forEach(function (product) {
                var categoryName = getCategoryName(product.categoryId);
                var productHTML = `
            <div class="col-md-4">
                <a href="/Home/single?slug=${product.slug}" class="h-entry mb-30 v-height gradient">
                    <div class="featured-img" style="background-image: url('${product.imageUrl}');"></div>
                    <div class="text">
                        <span class="date">${categoryName}</span>
                        <h2>${product.title}</h2>
                    </div>
                </a>
            </div>
        `;
                $('#productsContainer').append(productHTML);
            });

            // Hàm lấy tên danh mục từ id danh mục
            function getCategoryName(categoryId) {
                return categoriesMap[categoryId] || 'Unknown';
            }

            // Cập nhật trang hiện tại và nút Previous/Next
            $('#currentPage').text('Trang ' + currentPage);
            $('#prevPage').prop('disabled', currentPage === 1);
            $('#nextPage').prop('disabled', currentPage === Math.ceil(allProducts.length / itemsPerPage));

            $(document).on('click', '.h-entry h2', function (e) {
                e.preventDefault();
                var slug = $(this).closest('.h-entry').attr('data-slug'); // Lấy slug từ thuộc tính data-slug của phần tử cha
                // Chuyển hướng đến trang chi tiết của bài viết với slug tương ứng
                window.location.href = '/Home/single?slug=' + slug;
            });



        }

        // Hàm lấy sản phẩm trên trang hiện tại
        function getCurrentPageItems() {
            var startIndex = (currentPage - 1) * itemsPerPage;
            var endIndex = startIndex + itemsPerPage;
            return allProducts.slice(startIndex, endIndex);
        }

        // Xử lý khi click vào nút Previous
        $('#prevPage').click(function () {
            if (currentPage > 1) {
                currentPage--;
                updateUI();
            }
        });

        // Xử lý khi click vào nút Next
        $('#nextPage').click(function () {
            if (currentPage < Math.ceil(allProducts.length / itemsPerPage)) {
                currentPage++;
                updateUI();
            }
        });

        // Khởi động lấy sản phẩm khi tài liệu được tải
        fetchProducts(currentUser.userId);
    });

</script>