@{
    ViewData["Title"] = "Danh Sách Blog ";
}

<h1>@ViewData["Title"]</h1>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/datatables.min.js"></script>
<link href="~/css/datatables.datatables.min.css" rel="stylesheet" />
<style>
    .containerr {
        max-width: 1120px;
        margin: 0 auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    form div {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: 700;
    }

    input, textarea {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .hidden {
        display: none;
    }

    .image-container {
        max-width: 500px;
        max-height: 500px;
        overflow: hidden;
    }

        .image-container img {
            width: 100%;
            height: auto;
        }
</style>
<div class="containerr">
<table id="tbl1">
    <thead>
        <tr>
          
        
            <th>Tiêu Đề</th>
            <th>Nội Dung</th>
            <th>Ngày Tạo</th>
            <th>Người Dùng</th>         
            <th>Đường dẫn</th>
            <th>Hành Động</th>
        </tr>
    </thead>
</table>
</div>
@Html.Partial("_FooterPartial")
    <script>
    $(document).ready(function () {
        var token = localStorage.getItem('token');
        var headers = {};
        if (token) {
            // Nếu có mã token, thêm vào tiêu đề Authorization của mỗi yêu cầu AJAX
            headers.Authorization = 'Bearer ' + token;
        }

        var currentUser = getUserFromToken(token);

        var urlPublic = "http://localhost:5233/api/Products"; // URL lấy bài viết công khai

        // Lấy bài viết công khai
        $.ajax({
            url: urlPublic,
            method: 'GET',
            headers: headers,
            success: function (publicBlogs) {
                // Lọc các bài viết công khai của người dùng hiện tại
                var userPublicBlogs = publicBlogs.filter(blog => blog.userId === currentUser.userId);

                // Lấy bài viết riêng tư
                $.ajax({
                    url: "http://localhost:5233/api/Products/private/" + currentUser.userId, // URL lấy bài viết riêng tư
                    method: 'GET',
                    headers: headers,
                    success: function (privateBlogs) {
                        var allBlogs = userPublicBlogs.concat(privateBlogs);

                        populateDataTable(allBlogs);
                    }
                });
            }
        });
    });


    function populateDataTable(blogsData) {

        var table_direct = new DataTable('#tbl1', {
            data: blogsData,
            columns: [
                {
                    data: "title",
                    render: function (data, type, row) {
                        var maxLength = 25; // Số ký tự tối đa
                        if (data.length > maxLength) {
                            return data.substring(0, maxLength) + "...";
                        } else {
                            return data;
                        }
                    }
                },
                {
                    data: "content",
                    render: function (data, type, row) {
                        // Giới hạn số ký tự hiển thị
                        var limitedContent = data.substring(0, 6);
                        // Thêm nút "Xem chi tiết" để hiển thị toàn bộ nội dung
                        return '<div style="display: flex; align-items: center;">' +
                            '<div style="flex: 1;">' + limitedContent + '...</div>' +
                            '<div style="margin-left: 10px;"><button style="font-size: 16px; padding: 5px 10px;" onclick="viewFullContent(\'' + row.slug + '\')">Xem chi tiết</button></div>' +
                            '</div>';
                    }
                },
                { data: "createdAt" },
                {
                    data: "userName",
                    render: function (data, type, row) {
                        return data;
                    }
                },
                { data: "slug" },
                {
                    data: null,
                    render: function (data, type, row) {
                        return '<button href="#" onclick="editItem(\'' + row.slug + '\')">Update</button>' +
                            '<button onclick="deleteItem(' + row.blogId + ')">Delete</button>';
                    }
                }
            ]
        });
    }

    function editItem(slug) {
        // Redirect to the update page with the correct blog ID
        window.location.href = 'http://localhost:5236/Home/Update?slug=' + slug;
    }

    function viewDetails(slug) {
        // Redirect to the details page with the correct blog ID
        window.location.href = 'http://localhost:5236/Home/Details?slug=' + slug;
    }

    function deleteItem(id) {
        if (confirm("Are you sure you want to delete this item?")) {
            $.ajax({
                url: 'http://localhost:5233/api/Products/' + id,
                method: 'DELETE',
                success: function () {
                    alert('Item deleted successfully.');
                    location.reload(); // Tải lại trang để cập nhật dữ liệu mới
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi khi xóa mục:', error);
                    alert('Đã xảy ra lỗi khi xóa mục!');
                }
            });
        }
    }

    function viewFullContent(slug) {
        // Redirect to the details page with the correct blog ID to view full content
        window.location.href = 'http://localhost:5236/Home/Details?slug=' + slug;
    }

    function getUserFromToken(token) {
        // Giải mã token để lấy thông tin người dùng
        var tokenPayload = JSON.parse(atob(token.split('.')[1]));
        return {
            userId: tokenPayload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"],
            userName: tokenPayload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"],
            // Các thông tin khác của người dùng có thể lấy từ token
        };
    }
</script>